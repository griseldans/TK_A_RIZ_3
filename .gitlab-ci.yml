default:
    tags:
        - apap

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'main'

before_script:
  - docker info
  - javac -version


variables:
  IMAGE_OPENJDK_GRADLE: gradle:7.3.3-jdk17-alpine
  IMAGE_DOCKER_DIND: docker:20.10.16

stages:
  - build
  - test
  - build-image
  - publish-image
  - deploy

build-fe:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build
  script:
    - echo "Compiling Web..."
    - cd $CI_PROJECT_DIR/frontend_web
    - sh gradlew clean assemble
  artifacts:
    paths:
      - web/build/libs/frontend_web-0.0.1-SNAPSHOT.jar

build-user:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build
  script:
    - echo "Compiling API..."
    - cd $CI_PROJECT_DIR/user
    - sh gradlew clean assemble
  artifacts:
    paths:
      - order/build/libs/user-0.0.1-SNAPSHOT.jar

build-order:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build
  script:
    - echo "Compiling API..."
    - cd $CI_PROJECT_DIR/order
    - sh gradlew clean assemble
  artifacts:
    paths:
      - catalog/build/libs/order-0.0.1-SNAPSHOT.jar

build-catalog:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build
  script:
    - echo "Compiling API..."
    - cd $CI_PROJECT_DIR/catalog
    - sh gradlew clean assemble
  artifacts:
    paths:
      - user/build/libs/catalog-0.0.1-SNAPSHOT.jar

build-image:
  stage: build-image
  script:
    - echo "Building Web Docker Image..."
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:$CI_COMMIT_SHORT_SHA frontend_web
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:latest frontend_web
    - echo "Building API Docker Image..."
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:$CI_COMMIT_SHORT_SHA order
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:latest order
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:$CI_COMMIT_SHORT_SHA catalog
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:latest catalog
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:$CI_COMMIT_SHORT_SHA user
    - docker build -t $REGISTRY_SERVER/griselda.neysa/apap-058:latest user

publish-image:
  stage: publish-image
  script:
    - echo "Publishing Web Docker Image..."
    - echo $REGISTRY_SERVER
    - echo $REGISTRY_PASSWORD | docker login --username $REGISTRY_USERNAME --password-stdin $REGISTRY_SERVER
    - docker push $REGISTRY_SERVER/griselda.neysa/apap-058:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_SERVER/griselda.neysa/apap-058:latest
    - echo "Publishing API Docker Image..."
    - docker push $REGISTRY_SERVER/griselda.neysa/apap-058:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_SERVER/griselda.neysa/apap-058:latest

deploy:
  stage: deploy
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

  script:
    - echo "Deploy to server..."
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/apap-058/order/"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/apap-058/frontend_web/"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/apap-058/user/"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/apap-058/catalog/"

    - rsync -rahv $CI_PROJECT_DIR/docker-compose-deploy.yml "${DEPLOY_USERNAME}@${DEPLOY_SERVER}:~/apap-058/"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "cd ~/apap-058/ && export COMPOSE_HTTP_TIMEOUT=120 && docker-compose -f docker-compose-deploy.yml down && docker-compose -f docker-compose-deploy.yml pull && docker-compose -f docker-compose-deploy.yml up -d"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "docker exec apap-058_order-db_1 psql -U postgres -c 'CREATE DATABASE \"order\";'"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "docker exec apap-058_catalog-db_1 psql -U postgres -c 'CREATE DATABASE \"catalog\";'"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "docker exec apap-058_user-db_1 psql -U postgres -c 'CREATE DATABASE \"user\";'"